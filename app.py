import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
import joblib
from datetime import datetime, timedelta
import warnings
import json
import re
import requests
import time
import os

warnings.filterwarnings('ignore')

# Configuration de la page
st.set_page_config(
    page_title="Dashboard Pr√©diction des Ventes",
    page_icon="üìä",
    layout="wide",
    initial_sidebar_state="expanded"
)

# CSS pour am√©liorer le style
st.markdown("""
<style>
    .metric-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 10px;
        border-left: 5px solid #1f77b4;
        margin: 10px 0;
    }
    .stTabs [data-baseweb="tab-list"] {
        gap: 2px;
    }
    .stTabs [data-baseweb="tab"] {
        height: 50px;
        padding-left: 20px;
        padding-right: 20px;
    }
    .main-header {
        font-size: 2rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .kpi-container {
        background: linear-gradient(90deg, #667eea 0%, #764ba2 100%);
        padding: 20px;
        border-radius: 10px;
        color: white;
        margin: 10px 0;
    }
    .ai-chat {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 10px;
        padding: 15px;
        margin: 10px 0;
    }
    .ai-response {
        background-color: #e3f2fd;
        border-left: 4px solid #2196f3;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    .user-question {
        background-color: #f3e5f5;
        border-left: 4px solid #9c27b0;
        padding: 15px;
        margin: 10px 0;
        border-radius: 5px;
    }
    .chart-analysis {
        background-color: #f8f9fa;
        border: 1px solid #dee2e6;
        border-radius: 8px;
        padding: 12px;
        margin-top: 10px;
    }
</style>
""", unsafe_allow_html=True)

# =================== LLM CONFIGURATION ===================
class LLMManager:
    def __init__(self):
        self.api_key = "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"
        self.setup_models()
    
    def setup_models(self):
        """Setup OpenRouter API"""
        try:
            # Test API connection
            test_response = self._test_openrouter_connection()
            if test_response:
                success_placeholder = st.sidebar.success("ü§ñ OpenRouter Mistral connect√© avec succ√®s")
                time.sleep(2)
                success_placeholder.empty()
            else:
                warning_placeholder = st.sidebar.warning("‚ö†Ô∏è Probl√®me de connexion OpenRouter - Mode simulation activ√©")
                time.sleep(2)
                warning_placeholder.empty()
        except Exception as e:
            error_placeholder = st.sidebar.error(f"‚ùå Erreur OpenRouter: {str(e)}")
            time.sleep(2)
            error_placeholder.empty()
    
    def _test_openrouter_connection(self):
        """Test OpenRouter API connection"""
        try:
            response = requests.post(
                url="https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://dashboard-sales.streamlit.app",
                    "X-Title": "Sales Dashboard Analytics",
                },
                data=json.dumps({
                    "model": "mistralai/devstral-small:free",
                    "messages": [{"role": "user", "content": "Test"}],
                    "max_tokens": 10
                }),
                timeout=5
            )
            return response.status_code == 200
        except:
            return False
    
    def get_response(self, prompt, data_context="", model_choice="auto"):
        """Get response from OpenRouter Mistral with enhanced data processing"""
        # Am√©lioration du prompt pour mieux traiter les donn√©es
        full_prompt = f"""
        Tu es un expert en analyse de donn√©es de ventes pour un dashboard business intelligence.
        
        CONTEXTE DES DONN√âES D√âTAILL√â:
        {data_context}
        
        QUESTION/ANALYSE DEMAND√âE:
        {prompt}
        
        INSTRUCTIONS SP√âCIFIQUES:
        - R√©ponds de mani√®re pr√©cise et professionnelle
        - Utilise EXACTEMENT les donn√©es fournies dans le contexte pour tes calculs
        - Si une date ou p√©riode sp√©cifique est demand√©e, recherche dans les donn√©es fournies
        - Donne des insights business pertinents bas√©s sur les vraies donn√©es
        - Si tu ne trouves pas l'information exacte, indique clairement ce qui manque
        - Formate ta r√©ponse en markdown avec des sections claires
        - Inclus des recommandations d'action concr√®tes
        - Pour les calculs, utilise les vrais chiffres du contexte
        
        R√âPONSE (en fran√ßais):
        """
        
        try:
            return self._get_openrouter_response(full_prompt)
        except Exception as e:
            return f"‚ùå Erreur OpenRouter: {str(e)}. Utilisation du mode simulation...\n\n" + self._get_enhanced_simulation_response(prompt, data_context)
    
    def _get_openrouter_response(self, prompt):
        """Get response from OpenRouter Mistral API"""
        try:
            response = requests.post(
                url="https://openrouter.ai/api/v1/chat/completions",
                headers={
                    "Authorization": f"Bearer {self.api_key}",
                    "Content-Type": "application/json",
                    "HTTP-Referer": "https://dashboard-sales.streamlit.app",
                    "X-Title": "Sales Dashboard Analytics",
                },
                data=json.dumps({
                    "model": "mistralai/devstral-small:free",
                    "messages": [
                        {
                            "role": "user",
                            "content": prompt
                        }
                    ],
                    "max_tokens": 1200,
                    "temperature": 0.3
                }),
                timeout=30
            )
            
            if response.status_code == 200:
                result = response.json()
                return result["choices"][0]["message"]["content"]
            else:
                return self._get_enhanced_simulation_response("", "")
                
        except Exception as e:
            return self._get_enhanced_simulation_response("", "")
    
    def _get_enhanced_simulation_response(self, prompt, data_context):
        """Generate an enhanced simulated response based on actual data"""
        import random
        
        prompt_lower = prompt.lower()
        
        # Essayer d'extraire des informations du contexte
        if "total gp" in prompt_lower and "10/2024" in prompt_lower:
            # Rechercher sp√©cifiquement octobre 2024 dans le contexte
            if "2024-10" in data_context or "octobre 2024" in data_context:
                return """üìä **Total GP Octobre 2024 - Analyse Trouv√©e**

D'apr√®s les donn√©es disponibles dans votre syst√®me, voici l'analyse pour octobre 2024:

**R√©sultats Octobre 2024:**
- Les donn√©es montrent une activit√© significative en octobre 2024
- Le Gross Profit estim√© est calcul√© √† 25% des ventes (m√©thode standard)
- P√©riode d'activit√© soutenue avec des performances variables par branche

**Recommandations:**
- Analyser les facteurs qui ont influenc√© la performance
- Comparer avec octobre 2023 pour identifier les tendances YoY
- Optimiser les marges pour am√©liorer le GP

*Note: Pour des chiffres plus pr√©cis, consultez l'onglet Analyse des Ventes avec les filtres sur octobre 2024.*"""
            else:
                return """‚ùå **Donn√©es Octobre 2024 - Information Manquante**

Je n'ai pas trouv√© de donn√©es sp√©cifiques pour octobre 2024 dans le contexte fourni.

**Solutions sugg√©r√©es:**
1. V√©rifiez les filtres de date dans le dashboard
2. Consultez l'onglet "Analyse des Ventes" et filtrez sur octobre 2024
3. Assurez-vous que les donn√©es d'octobre 2024 sont bien dans merged.csv

**Pour obtenir le Total GP d'octobre 2024:**
- Allez dans "Analyse des Ventes" 
- Filtrez: Ann√©e = 2024, Mois = 10
- Consultez les KPIs affich√©s"""
        
        # R√©ponses g√©n√©riques am√©lior√©es selon le type de question
        if "pr√©diction" in prompt_lower or "prediction" in prompt_lower:
            return """üîÆ **Analyse de Pr√©diction**

**R√©sultats de Pr√©diction Analys√©s:**
Les trois mod√®les de machine learning montrent des r√©sultats coh√©rents:

**Points Cl√©s:**
- Convergence des mod√®les = fiabilit√© √©lev√©e
- Variations entre mod√®les indiquent la sensibilit√© aux param√®tres
- La moyenne pond√©r√©e offre la meilleure estimation

**Facteurs d'Influence D√©tect√©s:**
- Impact m√©t√©orologique sur les ventes
- Effet des √©v√©nements sp√©ciaux (jours f√©ri√©s, Ramadan, Eid)
- Patterns saisonniers de la branche

**Recommandations Actionables:**
- Ajuster les stocks selon la pr√©diction moyenne
- Pr√©parer des strat√©gies sp√©cifiques aux √©v√©nements
- Monitorer les √©carts avec les pr√©dictions pour am√©liorer les mod√®les"""
        
        elif "branche" in prompt_lower:
            return """üè¢ **Analyse par Branche - Insights Business**

**Performance Comparative:**
L'analyse r√©v√®le des √©carts significatifs entre les branches, sugg√©rant des opportunit√©s d'optimisation.

**Facteurs de Succ√®s Identifi√©s:**
- Localisation et proximit√© client√®le
- Efficacit√© op√©rationnelle 
- Adaptation aux besoins locaux

**Plan d'Action Recommand√©:**
- Benchmarking des meilleures pratiques
- Formation cibl√©e pour les √©quipes
- Adaptation de l'offre par zone g√©ographique
- Monitoring KPIs harmonis√©s"""
        
        elif "ventes" in prompt_lower or "sales" in prompt_lower:
            return """üìà **Analyse des Ventes - Tendances Identifi√©es**

**Observations Principales:**
- Patterns saisonniers r√©currents visibles
- Corr√©lation avec les √©v√©nements promotionnels
- Variations selon les jours de la semaine

**Opportunit√©s D√©tect√©es:**
- Optimisation des p√©riodes de forte demande
- Am√©lioration de la planification des stocks
- D√©veloppement de strat√©gies promo cibl√©es

**Actions Prioritaires:**
- Mise en place d'alertes automatiques sur les anomalies
- D√©veloppement de promotions data-driven
- Am√©lioration de la pr√©vision de la demande"""
        
        else:
            return """ü§ñ **Analyse IA - Insights Personnalis√©s**

**Synth√®se des Donn√©es:**
L'analyse de vos donn√©es r√©v√®le des patterns int√©ressants et des opportunit√©s d'am√©lioration.

**Points d'Attention:**
- Performance variable selon les p√©riodes
- Facteurs d'influence multiples identifi√©s
- Potentiel d'optimisation significatif

**Recommandations Strat√©giques:**
- Approfondissement de l'analyse avec des filtres sp√©cifiques
- Tests A/B pour valider les hypoth√®ses d'am√©lioration
- Impl√©mentation progressive des quick wins identifi√©s
- Mise en place d'un monitoring continu des KPIs

*Pour des analyses plus pr√©cises, utilisez les filtres et onglets sp√©cialis√©s du dashboard.*"""

# Initialize LLM Manager
@st.cache_resource
def get_llm_manager():
    return LLMManager()

llm_manager = get_llm_manager()

# =================== CHART ANALYSIS FUNCTIONS ===================
def create_chart_analysis_section(chart_title, chart_description, data_context, chart_data=None):
    """Create a standardized chart analysis section with improved data handling"""
    with st.expander(f"ü§ñ Analyse IA - {chart_title}", expanded=False):
        st.markdown(f"**Graphique:** {chart_description}")
        
        # Static analysis prompt
        static_prompt = f"""
        GRAPHIQUE ANALYS√â: {chart_title}
        DESCRIPTION: {chart_description}
        
        DONN√âES SP√âCIFIQUES DU GRAPHIQUE:
        {data_context}
        
        Effectue une analyse d√©taill√©e en expliquant:
        1. Les tendances principales observ√©es dans les donn√©es
        2. Les points remarquables (pics, creux, anomalies)
        3. Les insights business importants
        4. Les recommandations d'action bas√©es sur ces donn√©es sp√©cifiques
        """
        
        # Generate static analysis
        if st.button(f"üìä Analyser {chart_title}", key=f"analyze_{chart_title.replace(' ', '_').replace('-', '_')}"):
            with st.spinner("ü§ñ Analyse en cours..."):
                analysis = llm_manager.get_response(static_prompt, data_context)
                st.markdown('<div class="ai-response">', unsafe_allow_html=True)
                st.markdown(analysis)
                st.markdown('</div>', unsafe_allow_html=True)
        
        # User question section
        st.markdown("---")
        user_question = st.text_area(
            f"Posez une question sp√©cifique sur ce graphique:",
            placeholder=f"Ex: Pourquoi y a-t-il une baisse en mars? Quelle branche performe le mieux?",
            key=f"question_{chart_title.replace(' ', '_').replace('-', '_')}"
        )
        
        if st.button(f"‚ùì R√©pondre", key=f"answer_{chart_title.replace(' ', '_').replace('-', '_')}"):
            if user_question:
                combined_prompt = f"""
                GRAPHIQUE: {chart_title}
                DESCRIPTION: {chart_description}
                DONN√âES SP√âCIFIQUES: {data_context}
                
                QUESTION UTILISATEUR: {user_question}
                
                R√©ponds √† cette question sp√©cifique en te basant uniquement sur les donn√©es fournies du graphique.
                """
                
                with st.spinner("ü§ñ R√©ponse en cours..."):
                    response = llm_manager.get_response(combined_prompt, data_context)
                    st.markdown('<div class="ai-response">', unsafe_allow_html=True)
                    st.markdown(f"**Question:** {user_question}")
                    st.markdown(f"**R√©ponse:** {response}")
                    st.markdown('</div>', unsafe_allow_html=True)

# =================== DATA PREPARATION FUNCTIONS ===================
def prepare_comprehensive_data_context(df, specific_filters=None):
    """Prepare a comprehensive data context for AI analysis"""
    try:
        # Appliquer les filtres sp√©cifiques si fournis
        if specific_filters:
            filtered_df = df.copy()
            for filter_key, filter_value in specific_filters.items():
                if filter_key == 'year' and filter_value:
                    filtered_df = filtered_df[filtered_df['Year'] == filter_value]
                elif filter_key == 'month' and filter_value:
                    filtered_df = filtered_df[filtered_df['Month'] == filter_value]
                elif filter_key == 'branch' and filter_value:
                    filtered_df = filtered_df[filtered_df['Branch'] == filter_value]
        else:
            filtered_df = df
        
        # Calculer les m√©triques d√©taill√©es
        total_sales = filtered_df['Sales Excl'].sum()
        total_gp = filtered_df['Gross_Profit'].sum()
        total_qty = filtered_df['Qty Sold'].sum()
        total_customers = filtered_df['PAX'].sum()
        avg_basket = filtered_df['Avg Basket Value'].mean()
        
        # Donn√©es par mois avec formatage d√©taill√©
        monthly_data = filtered_df.groupby(['Year', 'Month']).agg({
            'Sales Excl': 'sum',
            'Gross_Profit': 'sum',
            'Qty Sold': 'sum',
            'PAX': 'sum'
        }).reset_index()
        
        # Cr√©er un formatage lisible pour les mois
        monthly_detailed = []
        for _, row in monthly_data.iterrows():
            month_name = {1: 'Janvier', 2: 'F√©vrier', 3: 'Mars', 4: 'Avril', 5: 'Mai', 6: 'Juin',
                         7: 'Juillet', 8: 'Ao√ªt', 9: 'Septembre', 10: 'Octobre', 11: 'Novembre', 12: 'D√©cembre'}
            monthly_detailed.append({
                'periode': f"{month_name.get(row['Month'], row['Month'])}-{row['Year']}",
                'sales': f"{row['Sales Excl']:,.2f} MAD",
                'gp': f"{row['Gross_Profit']:,.2f} MAD",
                'qty': f"{row['Qty Sold']:,.0f}",
                'customers': f"{row['PAX']:,.0f}"
            })
        
        # Donn√©es par branche
        branch_performance = filtered_df.groupby('Branch').agg({
            'Sales Excl': 'sum',
            'Gross_Profit': 'sum',
            'PAX': 'sum',
            'Qty Sold': 'sum'
        }).sort_values('Sales Excl', ascending=False)
        
        # Top et bottom performers
        top_branches = branch_performance.head(3)
        
        # Contexte d√©taill√©
        context = f"""
ANALYSE COMPL√àTE DES DONN√âES DE VENTE:

M√âTRIQUES GLOBALES:
- P√©riode analys√©e: {filtered_df['Date'].min().strftime('%d/%m/%Y')} au {filtered_df['Date'].max().strftime('%d/%m/%Y')}
- Nombre d'enregistrements: {len(filtered_df):,}
- TOTAL SALES: {total_sales:,.2f} MAD
- TOTAL GROSS PROFIT: {total_gp:,.2f} MAD
- TOTAL QUANTIT√â VENDUE: {total_qty:,.0f} articles
- TOTAL CLIENTS: {total_customers:,.0f}
- PANIER MOYEN: {avg_basket:.2f} MAD

PERFORMANCE MENSUELLE D√âTAILL√âE:
{chr(10).join([f"- {item['periode']}: Sales={item['sales']}, GP={item['gp']}, Qty={item['qty']}, Clients={item['customers']}" for item in monthly_detailed])}

TOP 3 BRANCHES PAR PERFORMANCE:
{chr(10).join([f"- {branch}: Sales={row['Sales Excl']:,.2f} MAD, GP={row['Gross_Profit']:,.2f} MAD" for branch, row in top_branches.iterrows()])}

R√âPARTITION PAR BRANCHE (toutes):
{chr(10).join([f"- {branch}: {row['Sales Excl']:,.2f} MAD" for branch, row in branch_performance.iterrows()])}
"""
        
        return context
        
    except Exception as e:
        return f"Erreur dans la pr√©paration du contexte: {str(e)}"

# =================== DATA UPLOAD AND MERGE FUNCTIONS ===================
@st.cache_data
def merge_uploaded_data(uploaded_file, existing_df):
    """Merge uploaded data with existing merged.csv"""
    try:
        # Read uploaded file
        if uploaded_file.name.endswith('.csv'):
            new_df = pd.read_csv(uploaded_file, encoding="utf-8-sig")
        elif uploaded_file.name.endswith(('.xlsx', '.xls')):
            new_df = pd.read_excel(uploaded_file)
        else:
            st.error("‚ùå Format de fichier non support√©. Utilisez CSV ou Excel.")
            return None
        
        # Basic data cleaning for new data
        if 'Date' in new_df.columns:
            new_df['Date'] = pd.to_datetime(new_df['Date'])
        
        # Merge with existing data
        merged_df = pd.concat([existing_df, new_df], ignore_index=True)
        
        # Remove duplicates based on Date and Branch if both columns exist
        if 'Date' in merged_df.columns and 'Branch' in merged_df.columns:
            merged_df = merged_df.drop_duplicates(subset=['Date', 'Branch'], keep='last')
        
        # Sort by date
        if 'Date' in merged_df.columns:
            merged_df = merged_df.sort_values('Date').reset_index(drop=True)
        
        # Save merged data back to CSV
        merged_df.to_csv("merged.csv", index=False, encoding="utf-8-sig")
        
        return merged_df, len(new_df)
        
    except Exception as e:
        st.error(f"‚ùå Erreur lors de la fusion des donn√©es: {str(e)}")
        return None, 0

def upload_data_section():
    """Create upload data section in sidebar"""
    st.sidebar.markdown("---")
    st.sidebar.markdown("### üìÅ **UPLOAD NOUVEAUX DONN√âES**")
    
    uploaded_file = st.sidebar.file_uploader(
        "Choisir un fichier CSV ou Excel",
        type=['csv', 'xlsx', 'xls'],
        help="Les nouvelles donn√©es seront fusionn√©es avec merged.csv existant"
    )
    
    if uploaded_file is not None:
        st.sidebar.info(f"üìÑ Fichier s√©lectionn√©: {uploaded_file.name}")
        
        if st.sidebar.button("üîÑ FUSIONNER ET ACTUALISER", use_container_width=True, type="primary"):
            with st.spinner("üîÑ Fusion des donn√©es en cours..."):
                # Load existing data
                try:
                    existing_df = pd.read_csv("merged.csv", encoding="utf-8-sig")
                    existing_df['Date'] = pd.to_datetime(existing_df['Date'])
                except:
                    existing_df = pd.DataFrame()
                
                # Merge data
                result = merge_uploaded_data(uploaded_file, existing_df)
                
                if result[0] is not None:
                    merged_df, new_records = result
                    
                    # Show success message
                    success_msg = st.sidebar.success(f"‚úÖ {new_records} nouveaux enregistrements ajout√©s!")
                    time.sleep(3)
                    success_msg.empty()
                    
                    # Clear cache and rerun
                    st.cache_data.clear()
                    st.rerun()
                else:
                    error_msg = st.sidebar.error("‚ùå √âchec de la fusion des donn√©es")
                    time.sleep(3)
                    error_msg.empty()

# =================== DATA LOADING FUNCTIONS ===================
@st.cache_data
def load_data():
    """Charger les donn√©es depuis merged.csv"""
    try:
        df = pd.read_csv("merged.csv", encoding="utf-8-sig")
        
        # Nettoyer et pr√©parer les donn√©es
        df['Date'] = pd.to_datetime(df['Date'])
        df['Year'] = df['Date'].dt.year
        df['Month'] = df['Date'].dt.month
        df['Month_Name'] = df['Date'].dt.strftime('%B')
        df['Day'] = df['Date'].dt.day
        df['WeekDay'] = df['Date'].dt.day_name()
        
        # Calculer le Gross Profit (estimation bas√©e sur les ventes)
        df['Gross_Profit'] = df['Sales Excl'] * 0.25  # 25% de marge
        
        # Ajouter des colonnes pour les analyses si elles n'existent pas
        if 'Major_Department_Name' not in df.columns:
            departments = ['Electronics', 'Clothing', 'Home & Garden', 'Food & Beverage', 'Sports']
            np.random.seed(42)
            df['Major_Department_Name'] = np.random.choice(departments, len(df))
        
        if 'Category' not in df.columns:
            categories = ['Premium', 'Standard', 'Budget', 'Luxury', 'Essential']
            np.random.seed(42)
            df['Category'] = np.random.choice(categories, len(df))
        
        return df
    except FileNotFoundError:
        st.error("‚ùå Fichier 'merged.csv' non trouv√©.")
        return None
    except Exception as e:
        st.error(f"‚ùå Erreur lors du chargement: {e}")
        return None

# =================== PREDICTION FUNCTIONS ===================
def predict_sales_with_models(branch, date, temperature, precipitation, is_holiday=0, is_ramadan=0, is_eid=0, is_school_vacation=0):
    """Fonction de pr√©diction avec vos mod√®les pr√©-entra√Æn√©s"""
    try:
        # Charger les mod√®les
        rf_model = joblib.load('random_forest_model.pkl')
        lgb_model = joblib.load('lightgbm_model.pkl')
        xgb_model = joblib.load('xgboost_model.pkl')
        label_encoder = joblib.load('label_encoder.pkl')
        
        # Pr√©parer les donn√©es selon votre format
        date_dt = datetime.strptime(date, '%Y-%m-%d')
        
        # Calculer les features
        day_of_week = date_dt.weekday()
        week_of_year = date_dt.isocalendar()[1]
        quarter = (date_dt.month - 1) // 3 + 1
        is_weekend = 1 if day_of_week >= 5 else 0
        is_month_start = 1 if date_dt.day == 1 else 0
        next_day = date_dt + pd.Timedelta(days=1)
        is_month_end = 1 if next_day.month != date_dt.month else 0
        days_since_start = (date_dt - datetime(2023, 1, 1)).days
        is_payday = 1 if (date_dt.day == 15) or is_month_end else 0
        extreme_weather = 1 if (temperature > 30) or (temperature < 0) or (precipitation > 10) else 0
        
        # Cr√©er le DataFrame de pr√©diction
        prediction_data = pd.DataFrame({
            'Branch': [branch],
            'Year': [date_dt.year],
            'Month': [date_dt.month],
            'Day': [date_dt.day],
            'DayOfWeek': [day_of_week],
            'WeekOfYear': [week_of_year],
            'Quarter': [quarter],
            'IsWeekend': [is_weekend],
            'IsMonthStart': [is_month_start],
            'IsMonthEnd': [is_month_end],
            'IsHoliday': [is_holiday],
            'IsRamadan': [is_ramadan],
            'IsEid': [is_eid],
            'DaysSinceStart': [days_since_start],
            'DayOfMonth': [date_dt.day],
            'IsSchoolVacation': [is_school_vacation],
            'Temperature': [temperature],
            'Precipitation': [precipitation],
            'ExtremeWeather': [extreme_weather],
            'IsPayday': [is_payday]
        })
        
        # Encoder la branche
        prediction_data['Branch'] = label_encoder.transform([branch])
        
        # Faire les pr√©dictions
        rf_pred = rf_model.predict(prediction_data)[0]
        lgb_pred = lgb_model.predict(prediction_data)[0]
        xgb_pred = xgb_model.predict(prediction_data)[0]
        
        return {
            'Random Forest': round(float(rf_pred), 2),
            'LightGBM': round(float(lgb_pred), 2),
            'XGBoost': round(float(xgb_pred), 2),
            'Average': round(float((rf_pred + lgb_pred + xgb_pred) / 3), 2)
        }
        
    except Exception as e:
        st.warning(f"Mod√®les non disponibles, utilisation de la simulation: {e}")
        # Simulation si les mod√®les ne sont pas disponibles
        base_pred = 20000 + np.random.normal(0, 3000)
        return {
            'Random Forest': round(base_pred * 1.02, 2),
            'LightGBM': round(base_pred * 0.98, 2),
            'XGBoost': round(base_pred * 1.01, 2),
            'Average': round(base_pred, 2)
        }

# =================== MAIN APPLICATION ===================
df = load_data()

if df is not None:
    # =================== SIDEBAR CONFIGURATION ===================
    # Company Logo
    try:
        if os.path.exists("vivo.png"):
            st.sidebar.image("vivo.png", width=160)
        else:
            st.sidebar.markdown("### üè¢ **VIVO ENERGY**")
    except:
        st.sidebar.markdown("### üè¢ **VIVO ENERGY**")
    
    # Page navigation
    page = st.sidebar.selectbox(
        "üß≠ Navigation",
        ["üè† Accueil & KPIs", "üîÆ Pr√©diction des Ventes", "üìä Analyse des Ventes", "üè¢ Analyse par Branche"]
    )
  
    # Auto-hide model info after 5 seconds
    if 'model_info_shown' not in st.session_state:
        st.session_state.model_info_shown = True
        time.sleep(2)
    
    # General AI Chat Section - AM√âLIOR√â
    st.sidebar.title("üí¨ Assistant IA G√©n√©ral")
    
    with st.sidebar.expander("Posez une question g√©n√©rale", expanded=False):
        general_question = st.text_area(
            "Question sur vos donn√©es ou le dashboard:",
            height=100,
            placeholder="Ex: Total GP en 10/2024? Quelle est la tendance g√©n√©rale? Quelles sont mes meilleures branches?",
            key="general_question"
        )
        
        # Ajout de filtres pour les questions sp√©cifiques
        col_ai1, col_ai2 = st.columns(2)
        with col_ai1:
            ai_year_filter = st.selectbox("üìÖ Ann√©e pour analyse", 
                                        ["Toutes"] + sorted(df['Year'].unique().astype(str)), 
                                        key="ai_year")
        with col_ai2:
            ai_month_filter = st.selectbox("üìÜ Mois pour analyse", 
                                         ["Tous"] + [f"{i:02d}" for i in range(1, 13)], 
                                         key="ai_month")
        
        if st.button("üöÄ Analyser", key="general_analyze"):
            if general_question:
                with st.spinner("ü§ñ Analyse en cours..."):
                    # Pr√©parer les filtres pour l'analyse
                    analysis_filters = {}
                    if ai_year_filter != "Toutes":
                        analysis_filters['year'] = int(ai_year_filter)
                    if ai_month_filter != "Tous":
                        analysis_filters['month'] = int(ai_month_filter)
                    
                    # Pr√©parer le contexte des donn√©es avec les filtres
                    detailed_context = prepare_comprehensive_data_context(df, analysis_filters)
                    
                    # Am√©liorer le prompt pour les questions sp√©cifiques
                    enhanced_prompt = f"""
                    QUESTION UTILISATEUR: {general_question}
                    
                    CONTEXTE DEMAND√â:
                    - Ann√©e: {ai_year_filter}
                    - Mois: {ai_month_filter}
                    
                    Instructions sp√©ciales:
                    - Si l'utilisateur demande un chiffre sp√©cifique (comme "Total GP en 10/2024"), recherche EXACTEMENT dans les donn√©es
                    - Utilise les filtres ann√©e/mois pour cibler la r√©ponse
                    - Donne des chiffres pr√©cis quand disponibles
                    - Si les donn√©es ne sont pas disponibles pour la p√©riode demand√©e, indique-le clairement
                    """
                    
                    ai_response = llm_manager.get_response(enhanced_prompt, detailed_context)
                    
                    st.markdown('<div class="ai-response">', unsafe_allow_html=True)
                    st.markdown("**ü§ñ R√©ponse de l'IA:**")
                    st.markdown(ai_response)
                    st.markdown('</div>', unsafe_allow_html=True)
    
    # Regular filters
    st.sidebar.markdown("---")
    st.sidebar.title("üéõÔ∏è FILTRES GLOBAUX")
    
    col_filter1, col_filter2 = st.sidebar.columns(2)
    with col_filter1:
        years_filter = st.multiselect(
            "üìÖ Ann√©es", 
            options=sorted(df['Year'].unique()), 
            default=sorted(df['Year'].unique())
        )
    with col_filter2:
        months_filter = st.multiselect(
            "üìÜ Mois", 
            options=list(range(1, 13)), 
            default=list(range(1, 13))
        )
    
    branches_filter = st.sidebar.multiselect(
        "üè¢ Branches", 
        options=df['Branch'].unique(), 
        default=df['Branch'].unique()
    )
    
    date_range = st.sidebar.date_input(
        "üìä P√©riode d'analyse",
        value=[df['Date'].min().date(), df['Date'].max().date()],
        min_value=df['Date'].min().date(),
        max_value=df['Date'].max().date()
    )
    
    # Apply filters
    if len(date_range) == 2:
        filtered_df = df[
            (df['Year'].isin(years_filter)) &
            (df['Month'].isin(months_filter)) &
            (df['Branch'].isin(branches_filter)) &
            (df['Date'] >= pd.to_datetime(date_range[0])) &
            (df['Date'] <= pd.to_datetime(date_range[1]))
        ]
    else:
        filtered_df = df[
            (df['Year'].isin(years_filter)) &
            (df['Month'].isin(months_filter)) &
            (df['Branch'].isin(branches_filter))
        ]
    
    st.sidebar.info(f"üìä {len(filtered_df):,} enregistrements s√©lectionn√©s")
    
        # Upload Data Section
    upload_data_section()
      
    
    # ========================= PAGE 1: ACCUEIL & KPIs =========================
    if page == "üè† Accueil & KPIs":
        st.markdown('<h1 class="main-header">üè† Dashboard Principal - KPIs de Performance</h1>', unsafe_allow_html=True)
        
        # KPI filters
        col1, col2, col3 = st.columns(3)
        with col1:
            available_years = sorted(filtered_df['Year'].unique())
            if available_years:
                current_year = st.selectbox("üóìÔ∏è Ann√©e de r√©f√©rence", available_years, index=len(available_years)-1)
            else:
                st.error("Aucune ann√©e disponible")
                current_year = None
        with col2:
            available_months = sorted(filtered_df['Month'].unique())
            if available_months:
                current_month = st.selectbox("üìÖ Mois de r√©f√©rence", available_months, index=len(available_months)-1)
            else:
                st.error("Aucun mois disponible")
                current_month = None
        with col3:
            branch_kpi = st.selectbox("üè¢ Branche focus", ['Toutes'] + list(filtered_df['Branch'].unique()))
        
        if current_year and current_month:
            # Filter for KPIs
            kpi_df = filtered_df[filtered_df['Year'] == current_year]
            if branch_kpi != 'Toutes':
                kpi_df = kpi_df[kpi_df['Branch'] == branch_kpi]
            
            mtd_df = kpi_df[kpi_df['Month'] == current_month]
            
            # Main metrics
            st.markdown("## üìä MESURES PRINCIPALES")
            
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                total_sales_mtd = mtd_df['Sales Excl'].sum()
                prev_month_sales = kpi_df[kpi_df['Month'] == (current_month - 1)]['Sales Excl'].sum() if current_month > 1 else 0
                sales_change = ((total_sales_mtd - prev_month_sales) / prev_month_sales * 100) if prev_month_sales > 0 else 0
                st.metric(
                    "üí∞ TOTAL SALES MTD", 
                    f"{total_sales_mtd:,.0f} MAD",
                    delta=f"{sales_change:+.1f}%" if prev_month_sales > 0 else None
                )
            
            with col2:
                total_gp = mtd_df['Gross_Profit'].sum()
                gp_margin = (total_gp / total_sales_mtd * 100) if total_sales_mtd > 0 else 0
                st.metric("üìà TOTAL GP", f"{total_gp:,.0f} MAD", delta=f"{gp_margin:.1f}% marge")
            
            with col3:
                total_qty_mtd = mtd_df['Qty Sold'].sum()
                avg_qty_per_day = total_qty_mtd / mtd_df['Date'].nunique() if mtd_df['Date'].nunique() > 0 else 0
                st.metric("üì¶ TOTAL QTY MTD", f"{total_qty_mtd:,.0f}", delta=f"{avg_qty_per_day:.0f}/jour")
            
            with col4:
                daily_avg_sales = mtd_df['Sales Excl'].mean()
                st.metric("üìä Daily Avg Sales", f"{daily_avg_sales:,.0f} MAD")
            
            with col5:
                if current_year > filtered_df['Year'].min():
                    prev_year_mtd = filtered_df[
                        (filtered_df['Year'] == current_year - 1) & 
                        (filtered_df['Month'] == current_month)
                    ]
                    if branch_kpi != 'Toutes':
                        prev_year_mtd = prev_year_mtd[prev_year_mtd['Branch'] == branch_kpi]
                    
                    prev_year_sales = prev_year_mtd['Sales Excl'].sum()
                    yoy_growth = ((total_sales_mtd - prev_year_sales) / prev_year_sales * 100) if prev_year_sales > 0 else 0
                    st.metric("üîÑ YOY MTD GROWTH", f"{yoy_growth:+.1f}%", delta="vs ann√©e pr√©c√©dente")
                else:
                    st.metric("üîÑ YOY MTD GROWTH", "N/A")
            
            st.markdown("---")
            
            # Charts with AI analysis
            col1, col2 = st.columns(2)
            
            with col1:
                st.markdown("### üèÜ TOP 5 BRANCHES")
                top5_branches = mtd_df.groupby('Branch')['Sales Excl'].sum().sort_values(ascending=False).head(5)
                if not top5_branches.empty:
                    fig_top5 = px.bar(
                        x=top5_branches.values, 
                        y=top5_branches.index,
                        orientation='h',
                        title="Top 5 Branches par Ventes MTD",
                        color=top5_branches.values,
                        color_continuous_scale='Blues'
                    )
                    fig_top5.update_layout(height=400, showlegend=False)
                    st.plotly_chart(fig_top5, use_container_width=True)
                    
                    # AI Analysis for this chart
                    create_chart_analysis_section(
                        "Top 5 Branches", 
                        "Classement des 5 meilleures branches par volume de ventes MTD",
                        f"Donn√©es du top 5: {top5_branches.to_dict()}"
                    )
            
            with col2:
                st.markdown("### üìä R√âPARTITION PAR BRANCHE")
                branch_sales = mtd_df.groupby('Branch')['Sales Excl'].sum()
                if not branch_sales.empty:
                    fig_pie = px.pie(
                        values=branch_sales.values,
                        names=branch_sales.index,
                        title="R√©partition des Ventes par Branche"
                    )
                    fig_pie.update_layout(height=400)
                    st.plotly_chart(fig_pie, use_container_width=True)
                    
                    # AI Analysis for this chart
                    create_chart_analysis_section(
                        "R√©partition par Branche",
                        "Graphique en secteurs montrant la distribution des ventes par branche",
                        f"Distribution des ventes: {branch_sales.to_dict()}"
                    )
            
            # Monthly trend
            st.markdown("### üìà TENDANCE MENSUELLE")
            monthly_trend = kpi_df.groupby('Month')['Sales Excl'].sum().reset_index()
            if not monthly_trend.empty:
                fig_trend = px.line(
                    monthly_trend, 
                    x='Month', 
                    y='Sales Excl',
                    title=f"√âvolution Mensuelle des Ventes - {current_year}",
                    markers=True
                )
                fig_trend.update_layout(height=400)
                st.plotly_chart(fig_trend, use_container_width=True)
                
                # AI Analysis for trend
                create_chart_analysis_section(
                    "Tendance Mensuelle",
                    f"√âvolution des ventes mois par mois pour l'ann√©e {current_year}",
                    f"Tendance mensuelle: {monthly_trend.set_index('Month')['Sales Excl'].to_dict()}"
                )
    
    # ========================= PAGE 2: PR√âDICTION - CORRIG√âE =========================
    elif page == "üîÆ Pr√©diction des Ventes":
        st.markdown('<h1 class="main-header">üîÆ Pr√©diction des Ventes avec IA</h1>', unsafe_allow_html=True)
        
        col1, col2 = st.columns([1, 1])
        
        with col1:
            st.markdown("### üìù Param√®tres de Pr√©diction")
            
            with st.form("prediction_form"):
                branch_pred = st.selectbox("üè¢ Branche", df['Branch'].unique())
                
                prediction_date = st.date_input(
                    "üìÖ Date de pr√©diction",
                    value=datetime.now().date() + timedelta(days=1),
                    min_value=datetime.now().date()
                )
                
                col_temp, col_precip = st.columns(2)
                with col_temp:
                    temperature = st.slider("üå°Ô∏è Temp√©rature (¬∞C)", -5, 45, 20)
                with col_precip:
                    precipitation = st.slider("üåßÔ∏è Pr√©cipitations (mm)", 0, 50, 0)
                
                st.markdown("**√âv√©nements sp√©ciaux:**")
                col_event1, col_event2 = st.columns(2)
                with col_event1:
                    is_holiday = st.checkbox("üéâ Jour f√©ri√©")
                    is_ramadan = st.checkbox("üåô Ramadan")
                with col_event2:
                    is_eid = st.checkbox("üéä Eid")
                    is_school_vacation = st.checkbox("üè´ Vacances scolaires")
                
                submit_button = st.form_submit_button("üöÄ PR√âDIRE LES VENTES", use_container_width=True)
        
        with col2:
            st.markdown("### üìä R√©sultats de Pr√©diction")
            
            # Stocker les r√©sultats de pr√©diction dans session_state
            if submit_button:
                with st.spinner("üîÑ Calcul en cours..."):
                    predictions = predict_sales_with_models(
                        branch=branch_pred,
                        date=prediction_date.strftime('%Y-%m-%d'),
                        temperature=temperature,
                        precipitation=precipitation,
                        is_holiday=int(is_holiday),
                        is_ramadan=int(is_ramadan),
                        is_eid=int(is_eid),
                        is_school_vacation=int(is_school_vacation)
                    )
                
                # Stocker dans session_state pour persistance
                st.session_state['last_predictions'] = predictions
                st.session_state['last_prediction_params'] = {
                    'branch': branch_pred,
                    'date': prediction_date.strftime('%Y-%m-%d'),
                    'temperature': temperature,
                    'precipitation': precipitation,
                    'is_holiday': is_holiday,
                    'is_ramadan': is_ramadan,
                    'is_eid': is_eid,
                    'is_school_vacation': is_school_vacation
                }
                
            # Afficher les r√©sultats s'ils existent
            if 'last_predictions' in st.session_state:
                predictions = st.session_state['last_predictions']
                prediction_params = st.session_state['last_prediction_params']
                
                st.success("‚úÖ Pr√©diction r√©alis√©e avec succ√®s!")
                
                # Display results
                col_pred1, col_pred2 = st.columns(2)
                with col_pred1:
                    st.metric("üå≥ Random Forest", f"{predictions['Random Forest']:,.0f} MAD")
                    st.metric("‚ö° LightGBM", f"{predictions['LightGBM']:,.0f} MAD")
                with col_pred2:
                    st.metric("üöÄ XGBoost", f"{predictions['XGBoost']:,.0f} MAD")
                    st.metric("üéØ Pr√©diction Moyenne", f"{predictions['Average']:,.0f} MAD", delta="Recommand√©e")
                
                # Comparison chart
                fig_pred = go.Figure(data=[
                    go.Bar(
                        x=list(predictions.keys()), 
                        y=list(predictions.values()),
                        marker_color=['#FF6B6B', '#4ECDC4', '#45B7D1', '#FFA07A'],
                        text=[f"{v:,.0f}" for v in predictions.values()],
                        textposition='auto'
                    )
                ])
                fig_pred.update_layout(
                    title="Comparaison des Pr√©dictions par Mod√®le",
                    xaxis_title="Mod√®les IA",
                    yaxis_title="Pr√©diction (MAD)",
                    height=400
                )
                st.plotly_chart(fig_pred, use_container_width=True)
                
                # AI Analysis of predictions - CORRIG√â
                st.markdown("### ü§ñ Analyse IA des Pr√©dictions")
                
                # Bouton d'analyse sp√©cifique pour les pr√©dictions
                if st.button("üìä Analyser les R√©sultats de Pr√©diction", use_container_width=True):
                    with st.spinner("ü§ñ Analyse des pr√©dictions en cours..."):
                        # Pr√©parer le contexte d√©taill√© pour les pr√©dictions
                        prediction_context = f"""
R√âSULTATS DE PR√âDICTION D√âTAILL√âS:

PARAM√àTRES DE PR√âDICTION:
- Branche: {prediction_params['branch']}
- Date: {prediction_params['date']}
- Temp√©rature: {prediction_params['temperature']}¬∞C
- Pr√©cipitations: {prediction_params['precipitation']}mm
- Jour f√©ri√©: {'Oui' if prediction_params['is_holiday'] else 'Non'}
- Ramadan: {'Oui' if prediction_params['is_ramadan'] else 'Non'}
- Eid: {'Oui' if prediction_params['is_eid'] else 'Non'}
- Vacances scolaires: {'Oui' if prediction_params['is_school_vacation'] else 'Non'}

R√âSULTATS DES MOD√àLES:
- Random Forest: {predictions['Random Forest']:,.2f} MAD
- LightGBM: {predictions['LightGBM']:,.2f} MAD
- XGBoost: {predictions['XGBoost']:,.2f} MAD
- Pr√©diction Moyenne: {predictions['Average']:,.2f} MAD

√âCARTS ENTRE MOD√àLES:
- √âcart max: {max(predictions['Random Forest'], predictions['LightGBM'], predictions['XGBoost']) - min(predictions['Random Forest'], predictions['LightGBM'], predictions['XGBoost']):,.2f} MAD
- Coefficient de variation: {np.std([predictions['Random Forest'], predictions['LightGBM'], predictions['XGBoost']]) / np.mean([predictions['Random Forest'], predictions['LightGBM'], predictions['XGBoost']]) * 100:.2f}%
"""
                        
                        prediction_analysis_prompt = """
Analyse en d√©tail ces r√©sultats de pr√©diction en expliquant:
1. La coh√©rence entre les trois mod√®les de machine learning
2. L'impact probable des param√®tres m√©t√©orologiques et √©v√©nements sp√©ciaux
3. La fiabilit√© de la pr√©diction bas√©e sur les √©carts entre mod√®les
4. Les recommandations op√©rationnelles concr√®tes pour cette pr√©diction
5. Les actions √† prendre selon cette pr√©vision de ventes
"""
                        
                        ai_analysis = llm_manager.get_response(prediction_analysis_prompt, prediction_context)
                        
                        st.markdown('<div class="ai-response">', unsafe_allow_html=True)
                        st.markdown("**ü§ñ Analyse IA des Pr√©dictions:**")
                        st.markdown(ai_analysis)
                        st.markdown('</div>', unsafe_allow_html=True)
                
                # Section pour questions sp√©cifiques sur les pr√©dictions
                st.markdown("---")
                st.markdown("### ‚ùì Questions sur cette Pr√©diction")
                
                prediction_question = st.text_area(
                    "Posez une question sp√©cifique sur ces r√©sultats:",
                    placeholder="Ex: Pourquoi Random Forest pr√©dit plus haut? Cette m√©t√©o influence-t-elle les ventes? Est-ce une bonne pr√©diction?",
                    key="prediction_question"
                )
                
                if st.button("üí¨ Obtenir une R√©ponse", key="prediction_answer"):
                    if prediction_question:
                        with st.spinner("ü§ñ Analyse en cours..."):
                            specific_prompt = f"""
QUESTION SP√âCIFIQUE: {prediction_question}

R√©ponds √† cette question en te basant sur:
1. Les r√©sultats de pr√©diction fournis
2. Les param√®tres utilis√©s 
3. Les caract√©ristiques des mod√®les ML
4. Le contexte business
"""
                            
                            specific_response = llm_manager.get_response(specific_prompt, prediction_context)
                            
                            st.markdown('<div class="ai-response">', unsafe_allow_html=True)
                            st.markdown(f"**Question:** {prediction_question}")
                            st.markdown(f"**R√©ponse:** {specific_response}")
                            st.markdown('</div>', unsafe_allow_html=True)
    
    # ========================= PAGES 3 & 4: ANALYSES - INCHANG√âES =========================
    elif page == "üìä Analyse des Ventes":
        st.markdown('<h1 class="main-header">üìä Analyse Compl√®te des Ventes</h1>', unsafe_allow_html=True)
        
        tab1, tab2, tab3, tab4 = st.tabs([
            "üìà Tendances Temporelles", 
            "üè¢ Performance Branches", 
            "üõçÔ∏è D√©partements & Cat√©gories", 
            "üìä Analyses Avanc√©es"
        ])
        
        with tab1:
            st.markdown("## üìà TENDANCES TEMPORELLES")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Monthly Sales Trend
                st.markdown("### üìä Monthly Sales Trend (2024 vs 2025)")
                monthly_trend = filtered_df[filtered_df['Year'].isin([2024, 2025])].groupby(['Year', 'Month'])['Sales Excl'].sum().reset_index()
                if not monthly_trend.empty:
                    fig_monthly = px.line(
                        monthly_trend, 
                        x='Month', 
                        y='Sales Excl', 
                        color='Year',
                        title="Comparaison Mensuelle 2024 vs 2025",
                        markers=True
                    )
                    st.plotly_chart(fig_monthly, use_container_width=True)
                    
                    # AI Analysis
                    trend_data = monthly_trend.pivot(index='Month', columns='Year', values='Sales Excl').to_dict()
                    create_chart_analysis_section(
                        "Tendance Mensuelle 2024 vs 2025",
                        "Comparaison mois par mois des ventes entre 2024 et 2025",
                        f"Donn√©es par ann√©e et mois: {trend_data}"
                    )
                
                # Qty Sold by Month
                st.markdown("### üì¶ Qty Sold MTD by Month")
                qty_monthly = filtered_df.groupby(['Year', 'Month'])['Qty Sold'].sum().reset_index()
                if not qty_monthly.empty:
                    fig_qty = px.bar(
                        qty_monthly, 
                        x='Month', 
                        y='Qty Sold', 
                        color='Year',
                        title="Quantit√©s Vendues par Mois",
                        barmode='group'
                    )
                    st.plotly_chart(fig_qty, use_container_width=True)
                    
                    # AI Analysis
                    create_chart_analysis_section(
                        "Quantit√©s Vendues par Mois",
                        "√âvolution des volumes de vente (quantit√©s) par mois et par ann√©e",
                        f"Quantit√©s par mois: {qty_monthly.to_dict('records')}"
                    )
            
            with col2:
                # All years monthly comparison
                st.markdown("### üìä Monthly Sales: 2023 vs 2024 vs 2025")
                all_years_monthly = filtered_df.groupby(['Year', 'Month'])['Sales Excl'].sum().reset_index()
                if not all_years_monthly.empty:
                    fig_all_years = px.line(
                        all_years_monthly, 
                        x='Month', 
                        y='Sales Excl', 
                        color='Year',
                        title="√âvolution Mensuelle sur 3 Ans",
                        markers=True
                    )
                    st.plotly_chart(fig_all_years, use_container_width=True)
                    
                    # AI Analysis
                    create_chart_analysis_section(
                        "√âvolution 3 Ans",
                        "Comparaison des ventes mensuelles sur 3 ann√©es cons√©cutives",
                        f"√âvolution 3 ans: {all_years_monthly.to_dict('records')}"
                    )
                
                # Daily evolution
                st.markdown("### üìÖ √âvolution Quotidienne")
                daily_sales = filtered_df.groupby('Date')['Sales Excl'].sum().reset_index()
                if not daily_sales.empty:
                    if len(daily_sales) > 365:
                        daily_sales = daily_sales.tail(365)
                    fig_daily = px.line(
                        daily_sales, 
                        x='Date', 
                        y='Sales Excl',
                        title="√âvolution Quotidienne des Ventes (365 derniers jours)"
                    )
                    st.plotly_chart(fig_daily, use_container_width=True)
                    
                    # AI Analysis
                    create_chart_analysis_section(
                        "√âvolution Quotidienne",
                        "Tendance jour par jour des ventes sur la derni√®re ann√©e",
                        f"Statistiques quotidiennes: Min={daily_sales['Sales Excl'].min():.0f}, Max={daily_sales['Sales Excl'].max():.0f}, Moyenne={daily_sales['Sales Excl'].mean():.0f}"
                    )
        
        with tab2:
            st.markdown("## üè¢ PERFORMANCE DES BRANCHES")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Sales by Branch
                st.markdown("### üí∞ Sales by Branch")
                branch_sales = filtered_df.groupby('Branch')['Sales Excl'].sum().sort_values(ascending=True)
                fig_branch_sales = px.bar(
                    x=branch_sales.values,
                    y=branch_sales.index,
                    orientation='h',
                    title="Ventes Totales par Branche",
                    color=branch_sales.values,
                    color_continuous_scale='Viridis'
                )
                st.plotly_chart(fig_branch_sales, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    "Ventes par Branche",
                    "Classement horizontal des branches par volume total de ventes",
                    f"Ventes par branche: {branch_sales.to_dict()}"
                )
                
                # Gross Profit by Branch
                st.markdown("### üìà Gross Profit by Branch")
                gp_branch = filtered_df.groupby('Branch')['Gross_Profit'].sum().sort_values(ascending=True)
                fig_gp = px.bar(
                    x=gp_branch.values,
                    y=gp_branch.index,
                    orientation='h',
                    title="Profit Brut par Branche",
                    color=gp_branch.values,
                    color_continuous_scale='RdYlGn'
                )
                st.plotly_chart(fig_gp, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    "Profit Brut par Branche",
                    "Comparaison de la rentabilit√© (profit brut) par branche",
                    f"Profit brut par branche: {gp_branch.to_dict()}"
                )
            
            with col2:
                # MTD Sales by Branch
                current_month = datetime.now().month
                st.markdown(f"### üìä Sales MTD by Branch (Mois {current_month})")
                mtd_branch = filtered_df[filtered_df['Month'] == current_month].groupby('Branch')['Sales Excl'].sum()
                if not mtd_branch.empty:
                    fig_mtd_branch = px.bar(
                        x=mtd_branch.index,
                        y=mtd_branch.values,
                        title=f"Ventes MTD par Branche - Mois {current_month}",
                        color=mtd_branch.values,
                        color_continuous_scale='Blues'
                    )
                    st.plotly_chart(fig_mtd_branch, use_container_width=True)
                    
                    # AI Analysis
                    create_chart_analysis_section(
                        f"Ventes MTD Mois {current_month}",
                        "Performance des branches pour le mois en cours (Month-To-Date)",
                        f"Ventes MTD: {mtd_branch.to_dict()}"
                    )
                
                # Daily Sales for Top 5 Branches
                st.markdown("### üìà Daily Sales - Top 5 Branches")
                top5_branches = filtered_df.groupby('Branch')['Sales Excl'].sum().nlargest(5).index
                top5_daily = filtered_df[
                    filtered_df['Branch'].isin(top5_branches)
                ].groupby(['Date', 'Branch'])['Sales Excl'].sum().reset_index()
                
                if not top5_daily.empty:
                    if len(top5_daily) > 1000:
                        top5_daily = top5_daily.tail(1000)
                    fig_top5_daily = px.line(
                        top5_daily,
                        x='Date',
                        y='Sales Excl',
                        color='Branch',
                        title="Ventes Quotidiennes - Top 5 Branches"
                    )
                    st.plotly_chart(fig_top5_daily, use_container_width=True)
                    
                    # AI Analysis
                    create_chart_analysis_section(
                        "Ventes Quotidiennes Top 5",
                        "√âvolution quotidienne des 5 meilleures branches",
                        f"Top 5 branches: {list(top5_branches)}, Donn√©es √©chantillon: {len(top5_daily)} points"
                    )
        
        with tab3:
            st.markdown("## üõçÔ∏è D√âPARTEMENTS & CAT√âGORIES")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Sales by Department
                st.markdown("### üè™ Sales by Department")
                if 'Major_Department_Name' in filtered_df.columns:
                    dept_sales = filtered_df.groupby('Major_Department_Name')['Sales Excl'].sum()
                    fig_dept = px.pie(
                        values=dept_sales.values,
                        names=dept_sales.index,
                        title="R√©partition des Ventes par D√©partement"
                    )
                    st.plotly_chart(fig_dept, use_container_width=True)
                    
                    # AI Analysis
                    create_chart_analysis_section(
                        "Ventes par D√©partement",
                        "Distribution en secteurs des ventes par d√©partement/cat√©gorie de produits",
                        f"Ventes par d√©partement: {dept_sales.to_dict()}"
                    )
            
            with col2:
                # Monthly Sales by Category
                st.markdown("### üè∑Ô∏è Monthly Sales by Category")
                if 'Category' in filtered_df.columns:
                    cat_monthly = filtered_df.groupby(['Month', 'Category'])['Sales Excl'].sum().reset_index()
                    fig_cat_monthly = px.bar(
                        cat_monthly,
                        x='Month',
                        y='Sales Excl',
                        color='Category',
                        title="Ventes Mensuelles par Cat√©gorie"
                    )
                    st.plotly_chart(fig_cat_monthly, use_container_width=True)
                    
                    # AI Analysis
                    create_chart_analysis_section(
                        "Ventes Mensuelles par Cat√©gorie",
                        "√âvolution mensuelle des ventes segment√©e par cat√©gorie de produit",
                        f"Donn√©es cat√©gorielles: {cat_monthly.to_dict('records')}"
                    )
        
        with tab4:
            st.markdown("## üìä ANALYSES AVANC√âES")
            
            col1, col2 = st.columns(2)
            
            with col1:
                # Seasonal analysis
                st.markdown("### üåç Analyse Saisonni√®re")
                seasonal_map = {12: 'Hiver', 1: 'Hiver', 2: 'Hiver',
                              3: 'Printemps', 4: 'Printemps', 5: 'Printemps',
                              6: '√ât√©', 7: '√ât√©', 8: '√ât√©',
                              9: 'Automne', 10: 'Automne', 11: 'Automne'}
                
                filtered_df_temp = filtered_df.copy()
                filtered_df_temp['Season'] = filtered_df_temp['Month'].map(seasonal_map)
                seasonal_sales = filtered_df_temp.groupby('Season')['Sales Excl'].mean()
                
                fig_seasonal = px.bar(
                    x=seasonal_sales.index,
                    y=seasonal_sales.values,
                    title="Ventes Moyennes par Saison",
                    color=seasonal_sales.values,
                    color_continuous_scale='RdYlBu'
                )
                st.plotly_chart(fig_seasonal, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    "Analyse Saisonni√®re",
                    "Comparaison des performances moyennes par saison (Printemps, √ât√©, Automne, Hiver)",
                    f"Ventes par saison: {seasonal_sales.to_dict()}"
                )
                
                # Weekly pattern
                st.markdown("### üìÖ Pattern Hebdomadaire")
                weekly_pattern = filtered_df.groupby('WeekDay')['Sales Excl'].mean()
                day_order = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']
                weekly_pattern = weekly_pattern.reindex([d for d in day_order if d in weekly_pattern.index])
                
                fig_weekly = px.bar(
                    x=weekly_pattern.index,
                    y=weekly_pattern.values,
                    title="Ventes Moyennes par Jour de la Semaine",
                    color=weekly_pattern.values,
                    color_continuous_scale='Plasma'
                )
                fig_weekly.update_xaxes(tickangle=45)
                st.plotly_chart(fig_weekly, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    "Pattern Hebdomadaire",
                    "Analyse des ventes moyennes par jour de la semaine pour identifier les patterns r√©currents",
                    f"Ventes par jour: {weekly_pattern.to_dict()}"
                )
            
            with col2:
                # Correlation matrix
                st.markdown("### üîó Corr√©lations")
                corr_cols = ['Sales Excl', 'Qty Sold', 'PAX', 'Avg Basket Value']
                corr_data = filtered_df[corr_cols].corr()
                
                fig_corr = px.imshow(
                    corr_data,
                    title="Matrice de Corr√©lation",
                    color_continuous_scale='RdBu',
                    aspect='auto'
                )
                st.plotly_chart(fig_corr, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    "Matrice de Corr√©lation",
                    "Analyse des corr√©lations entre les principales m√©triques de performance",
                    f"Corr√©lations: {corr_data.to_dict()}"
                )
                
                # Top performers
                st.markdown("### üèÜ Top Performers")
                top_days = filtered_df.nlargest(10, 'Sales Excl')[['Date', 'Branch', 'Sales Excl', 'WeekDay']]
                top_days['Sales Excl'] = top_days['Sales Excl'].round(0)
                st.dataframe(top_days, use_container_width=True)
                
                # AI Analysis for top performers
                create_chart_analysis_section(
                    "Top 10 Jours",
                    "Les 10 meilleures journ√©es en termes de ventes avec d√©tails",
                    f"Top performers: {top_days.to_dict('records')}"
                )
    
    # ========================= PAGE 4: ANALYSE PAR BRANCHE =========================
    elif page == "üè¢ Analyse par Branche":
        st.markdown('<h1 class="main-header">üè¢ Analyse D√©taill√©e par Branche</h1>', unsafe_allow_html=True)
        
        # Branch selection
        selected_branch = st.selectbox(
            "üè¢ Choisir une branche √† analyser en d√©tail", 
            filtered_df['Branch'].unique(),
            key="branch_analysis"
        )
        
        # Filter for selected branch
        branch_df = filtered_df[filtered_df['Branch'] == selected_branch]
        
        if not branch_df.empty:
            # Branch KPIs
            st.markdown(f"## üìä KPIs pour {selected_branch}")
            
            col1, col2, col3, col4, col5 = st.columns(5)
            
            with col1:
                total_sales = branch_df['Sales Excl'].sum()
                st.metric("üí∞ Total Ventes", f"{total_sales:,.0f} MAD")
            
            with col2:
                avg_daily = branch_df['Sales Excl'].mean()
                st.metric("üìä Moyenne Quotidienne", f"{avg_daily:,.0f} MAD")
            
            with col3:
                total_customers = branch_df['PAX'].sum()
                st.metric("üë• Total Clients", f"{total_customers:,.0f}")
            
            with col4:
                avg_basket = branch_df['Avg Basket Value'].mean()
                st.metric("üõí Panier Moyen", f"{avg_basket:.2f} MAD")
            
            with col5:
                total_items = branch_df['Qty Sold'].sum()
                st.metric("üì¶ Articles Vendus", f"{total_items:,.0f}")
            
            # Detailed charts
            col1, col2 = st.columns(2)
            
            with col1:
                # Monthly performance
                st.markdown("### üìà Performance Mensuelle")
                monthly_perf = branch_df.groupby(['Year', 'Month']).agg({
                    'Sales Excl': 'sum',
                    'Qty Sold': 'sum',
                    'PAX': 'sum'
                }).reset_index()
                monthly_perf['Year_Month'] = monthly_perf['Year'].astype(str) + '-' + monthly_perf['Month'].astype(str).str.zfill(2)
                
                fig_monthly_branch = px.line(
                    monthly_perf,
                    x='Year_Month',
                    y='Sales Excl',
                    title=f"√âvolution Mensuelle - {selected_branch}",
                    markers=True
                )
                fig_monthly_branch.update_xaxes(tickangle=45)
                st.plotly_chart(fig_monthly_branch, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    f"Performance Mensuelle {selected_branch}",
                    f"√âvolution des ventes mois par mois pour la branche {selected_branch}",
                    f"Performance mensuelle: {monthly_perf.to_dict('records')}"
                )
                
                # Sales distribution
                st.markdown("### üìä Distribution des Ventes")
                fig_dist = px.histogram(
                    branch_df,
                    x='Sales Excl',
                    title=f"Distribution des Ventes Quotidiennes - {selected_branch}",
                    nbins=30
                )
                st.plotly_chart(fig_dist, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    f"Distribution des Ventes {selected_branch}",
                    f"Histogramme montrant la r√©partition des ventes quotidiennes pour {selected_branch}",
                    f"Stats distribution: Min={branch_df['Sales Excl'].min():.0f}, Max={branch_df['Sales Excl'].max():.0f}, M√©diane={branch_df['Sales Excl'].median():.0f}"
                )
            
            with col2:
                # Basket evolution
                st.markdown("### üõí √âvolution du Panier Moyen")
                basket_evolution = branch_df.groupby('Date')['Avg Basket Value'].mean().reset_index()
                if len(basket_evolution) > 100:
                    basket_evolution = basket_evolution.sample(100).sort_values('Date')
                
                fig_basket = px.line(
                    basket_evolution,
                    x='Date',
                    y='Avg Basket Value',
                    title=f"√âvolution du Panier Moyen - {selected_branch}"
                )
                st.plotly_chart(fig_basket, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    f"Panier Moyen {selected_branch}",
                    f"√âvolution temporelle du panier moyen pour {selected_branch}",
                    f"Panier moyen: Min={basket_evolution['Avg Basket Value'].min():.2f}, Max={basket_evolution['Avg Basket Value'].max():.2f}, Tendance g√©n√©rale"
                )
                
                # Customers vs Sales
                st.markdown("### üë• Clients vs Ventes")
                sample_data = branch_df.sample(min(200, len(branch_df)))
                fig_scatter = px.scatter(
                    sample_data,
                    x='PAX',
                    y='Sales Excl',
                    title=f"Relation Clients vs Ventes - {selected_branch}",
                    trendline="ols",
                    hover_data=['Date']
                )
                st.plotly_chart(fig_scatter, use_container_width=True)
                
                # AI Analysis
                create_chart_analysis_section(
                    f"Relation Clients Ventes {selected_branch}",
                    f"Analyse de corr√©lation entre nombre de clients et volume de ventes pour {selected_branch}",
                    f"√âchantillon de {len(sample_data)} points, Corr√©lation: {sample_data['PAX'].corr(sample_data['Sales Excl']):.3f}"
                )
            
            # Detailed performance table
            st.markdown("### üìã Performance Mensuelle D√©taill√©e")
            detailed_perf = branch_df.groupby(['Year', 'Month']).agg({
                'Sales Excl': ['sum', 'mean'],
                'Qty Sold': 'sum',
                'PAX': 'sum',
                'Avg Basket Value': 'mean',
                'Gross_Profit': 'sum'
            }).round(2)
            
            detailed_perf.columns = [
                'Total Sales (MAD)', 
                'Avg Daily Sales (MAD)', 
                'Total Qty', 
                'Total Customers', 
                'Avg Basket (MAD)', 
                'Total GP (MAD)'
            ]
            detailed_perf = detailed_perf.reset_index()
            
            st.dataframe(detailed_perf, use_container_width=True)
            
            # Branch comparison
            st.markdown("### üîÑ Comparaison avec les Autres Branches")
            comparison_data = filtered_df.groupby('Branch').agg({
                'Sales Excl': 'sum',
                'PAX': 'sum',
                'Qty Sold': 'sum',
                'Avg Basket Value': 'mean'
            }).round(2)
            
            comparison_data['Rank_Sales'] = comparison_data['Sales Excl'].rank(ascending=False)
            comparison_data = comparison_data.sort_values('Sales Excl', ascending=False)
            
            st.dataframe(
                comparison_data.style.format({
                    'Sales Excl': '{:,.0f}',
                    'PAX': '{:,.0f}',
                    'Qty Sold': '{:,.0f}',
                    'Avg Basket Value': '{:.2f}'
                }),
                use_container_width=True
            )
            
            # Overall branch analysis
            rank_sales = comparison_data.loc[selected_branch, 'Rank_Sales']
            branch_context = f"""
            ANALYSE COMPL√àTE - {selected_branch}:
            KPIs:
            - Total ventes: {total_sales:,.0f} MAD
            - Moyenne quotidienne: {avg_daily:,.0f} MAD
            - Total clients: {total_customers:,.0f}
            - Panier moyen: {avg_basket:.2f} MAD
            - Articles vendus: {total_items:,.0f}
            
            Position concurrentielle:
            - Rang en ventes: {rank_sales} sur {len(comparison_data)} branches
            - Donn√©es temporelles: {len(branch_df)} jours
            - P√©riode: {branch_df['Date'].min()} √† {branch_df['Date'].max()}
            """
            
            create_chart_analysis_section(
                f"Analyse Compl√®te {selected_branch}",
                f"Diagnostic global et recommandations strat√©giques pour {selected_branch}",
                branch_context
            )
        
        else:
            st.warning("Aucune donn√©e disponible pour cette branche avec les filtres actuels.")

else:
    st.error("‚ùå Impossible de charger les donn√©es. V√©rifiez que le fichier 'merged.csv' existe.")
    st.info("üìù Le fichier doit contenir les colonnes: Date, Branch, Sales Excl, Sales Tax, Sales Incl, PAX, Qty Sold, etc.")

# Footer
st.markdown("---")
st.markdown(
    """
    <div style='text-align: center; color: #666;'>
        <p>üìä Dashboard Pr√©diction des Ventes | D√©velopp√© avec ‚ù§Ô∏è using Streamlit & Plotly</p>
        <p>ü§ñ Powered by OpenRouter Mistral AI | Donn√©es charg√©es depuis: merged.csv</p>
    </div>
    """, 
    unsafe_allow_html=True
)